/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package karnaughmap;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.ArrayList;
import java.util.Vector;

/**
 *
 * @author Administrator
 */
public class KarnaughMapApplet extends javax.swing.JApplet {

public static class Term {//term type
    public String number;
    public boolean pair;
}

int[][] msop = new int[4][4];// matrix for sop
int[][] mpos = new int[4][4];// matrix for pos
int correction=0;//correction for differrent size of matrix
int row = 0;
int column = 0;

int impVar=0;
final  int maxTrm=16; 
Vector<String> takeTerm= new Vector <String>(); //binary value of pressed button in Vector, site of vector depending at num of pressed button 
ArrayList<Term>[][] implTab=new ArrayList[5][5]; //sorted table of implicant
Vector<String> resTermVect= new Vector <String>();
int num=0;//number of pressed button
int numpos=4;//number of pressed 0
int numsop=0;//number of pressed 1
String ResTerm = "";//resutl term
String ResTermHDL = "";//resutl term

/**
     * Initializes the applet Karnaugh_map_Applet
     */
    @Override
    public void init() {    
        for (int i=0;i<4;i++){          
            for (int j=0;j<4;j++ ){
                msop[i][j]=20;      //reset msop 
            }
        }
        mpos[0][0]=0;   //set mpos
        mpos[0][1]=1;
        mpos[1][0]=2;
        mpos[1][1]=3;
        
        this.setSize(350,360);
           
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KarnaughMapApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KarnaughMapApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KarnaughMapApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KarnaughMapApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the applet
         */
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {

                public void run() {
                    initComponents();
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always riegenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        term0 = new javax.swing.JToggleButton();
        term1 = new javax.swing.JToggleButton();
        term2 = new javax.swing.JToggleButton();
        term3 = new javax.swing.JToggleButton();
        term4 = new javax.swing.JToggleButton();
        term5 = new javax.swing.JToggleButton();
        term6 = new javax.swing.JToggleButton();
        term7 = new javax.swing.JToggleButton();
        term8 = new javax.swing.JToggleButton();
        term9 = new javax.swing.JToggleButton();
        term10 = new javax.swing.JToggleButton();
        term11 = new javax.swing.JToggleButton();
        term12 = new javax.swing.JToggleButton();
        term13 = new javax.swing.JToggleButton();
        term14 = new javax.swing.JToggleButton();
        term15 = new javax.swing.JToggleButton();
        variableImput = new javax.swing.JComboBox();
        minResult = new javax.swing.JTextField();
        generate = new javax.swing.JButton();
        functionShape = new javax.swing.JComboBox();
        minResultHDL = new javax.swing.JTextField();

        term0.setText("0");
        term0.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        term0.setMaximumSize(new java.awt.Dimension(40, 35));
        term0.setMinimumSize(new java.awt.Dimension(40, 35));
        term0.setPreferredSize(new java.awt.Dimension(40, 35));
        term0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                term0ActionPerformed(evt);
            }
        });

        term1.setText("0");
        term1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        term1.setMaximumSize(new java.awt.Dimension(40, 35));
        term1.setMinimumSize(new java.awt.Dimension(40, 35));
        term1.setPreferredSize(new java.awt.Dimension(40, 35));
        term1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                term1ActionPerformed(evt);
            }
        });

        term2.setText("0");
        term2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        term2.setMaximumSize(new java.awt.Dimension(40, 35));
        term2.setMinimumSize(new java.awt.Dimension(40, 35));
        term2.setPreferredSize(new java.awt.Dimension(40, 35));
        term2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                term2ActionPerformed(evt);
            }
        });

        term3.setText("0");
        term3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        term3.setMaximumSize(new java.awt.Dimension(40, 35));
        term3.setMinimumSize(new java.awt.Dimension(40, 35));
        term3.setPreferredSize(new java.awt.Dimension(40, 35));
        term3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                term3ActionPerformed(evt);
            }
        });

        term4.setText("0");
        term4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        term4.setMaximumSize(new java.awt.Dimension(40, 35));
        term4.setMinimumSize(new java.awt.Dimension(40, 35));
        term4.setPreferredSize(new java.awt.Dimension(40, 35));
        term4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                term4ActionPerformed(evt);
            }
        });

        term5.setText("0");
        term5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        term5.setMaximumSize(new java.awt.Dimension(40, 35));
        term5.setMinimumSize(new java.awt.Dimension(40, 35));
        term5.setPreferredSize(new java.awt.Dimension(40, 35));
        term5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                term5ActionPerformed(evt);
            }
        });

        term6.setText("0");
        term6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        term6.setMaximumSize(new java.awt.Dimension(40, 35));
        term6.setMinimumSize(new java.awt.Dimension(40, 35));
        term6.setPreferredSize(new java.awt.Dimension(40, 35));
        term6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                term6ActionPerformed(evt);
            }
        });

        term7.setText("0");
        term7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        term7.setMaximumSize(new java.awt.Dimension(40, 35));
        term7.setMinimumSize(new java.awt.Dimension(40, 35));
        term7.setPreferredSize(new java.awt.Dimension(40, 35));
        term7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                term7ActionPerformed(evt);
            }
        });

        term8.setText("0");
        term8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        term8.setMaximumSize(new java.awt.Dimension(40, 35));
        term8.setMinimumSize(new java.awt.Dimension(40, 35));
        term8.setPreferredSize(new java.awt.Dimension(40, 35));
        term8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                term8ActionPerformed(evt);
            }
        });

        term9.setText("0");
        term9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        term9.setMaximumSize(new java.awt.Dimension(40, 35));
        term9.setMinimumSize(new java.awt.Dimension(40, 35));
        term9.setPreferredSize(new java.awt.Dimension(40, 35));
        term9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                term9ActionPerformed(evt);
            }
        });

        term10.setText("0");
        term10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        term10.setMaximumSize(new java.awt.Dimension(40, 35));
        term10.setMinimumSize(new java.awt.Dimension(40, 35));
        term10.setPreferredSize(new java.awt.Dimension(40, 35));
        term10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                term10ActionPerformed(evt);
            }
        });

        term11.setText("0");
        term11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        term11.setMaximumSize(new java.awt.Dimension(40, 35));
        term11.setMinimumSize(new java.awt.Dimension(40, 35));
        term11.setPreferredSize(new java.awt.Dimension(40, 35));
        term11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                term11ActionPerformed(evt);
            }
        });

        term12.setText("0");
        term12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        term12.setMaximumSize(new java.awt.Dimension(40, 35));
        term12.setMinimumSize(new java.awt.Dimension(40, 35));
        term12.setPreferredSize(new java.awt.Dimension(40, 35));
        term12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                term12ActionPerformed(evt);
            }
        });

        term13.setText("0");
        term13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        term13.setMaximumSize(new java.awt.Dimension(40, 35));
        term13.setMinimumSize(new java.awt.Dimension(40, 35));
        term13.setPreferredSize(new java.awt.Dimension(40, 35));
        term13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                term13ActionPerformed(evt);
            }
        });

        term14.setText("0");
        term14.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        term14.setMaximumSize(new java.awt.Dimension(40, 35));
        term14.setMinimumSize(new java.awt.Dimension(40, 35));
        term14.setPreferredSize(new java.awt.Dimension(40, 35));
        term14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                term14ActionPerformed(evt);
            }
        });

        term15.setText("0");
        term15.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        term15.setMaximumSize(new java.awt.Dimension(40, 35));
        term15.setMinimumSize(new java.awt.Dimension(40, 35));
        term15.setPreferredSize(new java.awt.Dimension(40, 35));
        term15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                term15ActionPerformed(evt);
            }
        });

        variableImput.setMaximumRowCount(3);
        variableImput.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2 imputs", "3 imputs", "4 imputs" }));
        variableImput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                variableImputActionPerformed(evt);
            }
        });

        generate.setText("GENERATE");
        generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateActionPerformed(evt);
            }
        });

        functionShape.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SOP", "POS" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(term8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(term0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(term4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(term12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(term5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(term6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(term13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(term14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(term9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(term10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(term7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(term15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(term11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(term1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(term2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(term3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(minResult, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(minResultHDL, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 268, Short.MAX_VALUE)
                                .addComponent(functionShape, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(variableImput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(generate)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(variableImput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(functionShape, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(term2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(term3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(term0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(term1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(term4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(term5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(term6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(term7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(term8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(term9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(term11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(term10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(term12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(term15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(term13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(term14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addComponent(generate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minResultHDL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

  
    private void term1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_term1ActionPerformed
        this.repaint();
        
        if (term1.isSelected()) {
            term1.setText("1");
            msop[0][1]=1;
            mpos[0][1]=20;
            numsop++;
            numpos--;
        }
        else{
            term1.setText("0");
             msop[0][1]=20;//set flag - never used at map for 4 variables(0 haven't be used)
             mpos[0][1]=1;
             numsop--;
             numpos++;
        }
    }//GEN-LAST:event_term1ActionPerformed

    private void term0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_term0ActionPerformed
        this.repaint();

        if (term0.isSelected()) {
            term0.setText("1");
            msop[0][0]=0;
            mpos[0][0]=20;
            numsop++;
            numpos--;
        }
        else {
            term0.setText("0");
            msop[0][0]=20;
            mpos[0][0]=0;
            numsop--;
            numpos++;
        }
    }//GEN-LAST:event_term0ActionPerformed

    private void term2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_term2ActionPerformed
        this.repaint();

        if (term2.isSelected()) {
            term2.setText("1");
            msop[0][2]=3;
            mpos[0][2]=20;
            numsop++;
            numpos--;
        }
        else {
            term2.setText("0");
            msop[0][2]=20;
            mpos[0][2]=3;
            numsop--;numpos++;
        }
    }//GEN-LAST:event_term2ActionPerformed

    private void term3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_term3ActionPerformed
        this.repaint();

        if (term3.isSelected()) {
            term3.setText("1");
            msop[0][3]=2;
            mpos[0][3]=20;
            numsop++;numpos--;
        }
        else {
            term3.setText("0");
            msop[0][3]=20;
            mpos[0][3]=2;
            numsop--;numpos++;
        }
    }//GEN-LAST:event_term3ActionPerformed

    private void term4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_term4ActionPerformed
        this.repaint();

        if (term4.isSelected()) {
            term4.setText("1");
            msop[1][0]=4+correction;
            mpos[1][0]=20;
            numsop++;numpos--;
        }
        else {
            term4.setText("0");
            msop[1][0]=20;
            mpos[1][0]=4+correction;
            numsop--;numpos++;
        }
    }//GEN-LAST:event_term4ActionPerformed

    private void term5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_term5ActionPerformed
        this.repaint();

        if (term5.isSelected()) {
            term5.setText("1");
            msop[1][1]=5+correction;
            mpos[1][1]=20;
            numsop++;numpos--;
        }
        else {
            term5.setText("0");
            msop[1][1]=20;
            mpos[1][1]=5+correction;
            numsop--;numpos++;
        }
    }//GEN-LAST:event_term5ActionPerformed

    private void term6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_term6ActionPerformed
        this.repaint();

        if (term6.isSelected()) {
            term6.setText("1");
            msop[1][2]=7;
            mpos[1][2]=20;
            numsop++;numpos--;
        }
        else {
            term6.setText("0");
            msop[1][2]=20;
            mpos[1][2]=7;
            numsop--;numpos++;
        }
    }//GEN-LAST:event_term6ActionPerformed

    private void term7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_term7ActionPerformed
        this.repaint();

        if (term7.isSelected()) {
            term7.setText("1");
            msop[1][3]=6;
            mpos[1][3]=20;
            numsop++;numpos--;
        }
        else {
            term7.setText("0");
            msop[1][3]=20;
            mpos[1][3]=6;
            numsop--;numpos++;
        }
    }//GEN-LAST:event_term7ActionPerformed

    private void term8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_term8ActionPerformed
        this.repaint();

        if (term8.isSelected()) {
            term8.setText("1");
            msop[2][0]=12;
            mpos[2][0]=20;
            numsop++;numpos--;
        }
        else {
            term8.setText("0");
            msop[2][0]=20;
            mpos[2][0]=12;numsop--;numpos++;
        }
    }//GEN-LAST:event_term8ActionPerformed

    private void term9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_term9ActionPerformed
        this.repaint();

        if (term9.isSelected()) {
            term9.setText("1");
            msop[2][1]=13;
            mpos[2][1]=20;
            numsop++;numpos--;
        }
        else {
            term9.setText("0");
            msop[2][1]=20;
            mpos[2][1]=13;
            numsop--;numpos++;
        }
    }//GEN-LAST:event_term9ActionPerformed

    private void term10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_term10ActionPerformed
        this.repaint();

        if (term10.isSelected()) {
            term10.setText("1");
            msop[2][2]=15;
            mpos[2][2]=20;
            numsop++;numpos--;
        }
        else {
            term10.setText("0");
            msop[2][2]=20;
            mpos[2][2]=15;
            numsop--;numpos++;
        }
    }//GEN-LAST:event_term10ActionPerformed

    private void term11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_term11ActionPerformed
        this.repaint();

        if (term11.isSelected()) {
            term11.setText("1");
            msop[2][3]=14;
            mpos[2][3]=20;
            numsop++;numpos--;
        }
        else {
            term11.setText("0");
            msop[2][3]=20;
            mpos[2][3]=14;
            numsop--;numpos++;
        }
    }//GEN-LAST:event_term11ActionPerformed

    private void term12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_term12ActionPerformed
        this.repaint();

        if (term12.isSelected()) {
            term12.setText("1");
            msop[3][0]=8;
            mpos[3][0]=20;
            numsop++;numpos--;
        }
        else {
            term12.setText("0");
            msop[3][0]=20;
            mpos[3][0]=8;
            numsop--;numpos++;
        }
    }//GEN-LAST:event_term12ActionPerformed

    private void term13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_term13ActionPerformed
        this.repaint();

        if (term13.isSelected()) {
            term13.setText("1");
            msop[3][1]=9;
            mpos[3][1]=20;
            numsop++;numpos--;
        }
        else {
            term13.setText("0");
            msop[3][1]=20;
            mpos[3][1]=9;
            numsop--;numpos++;
        }
    }//GEN-LAST:event_term13ActionPerformed

    private void term14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_term14ActionPerformed
        this.repaint();

        if (term14.isSelected()) {
            term14.setText("1");
            msop[3][2]=11;
            mpos[3][2]=20;
            numsop++;numpos--;
        }
        else {
            term14.setText("0");
            msop[3][2]=20;
            mpos[3][2]=11;
            numsop--;numpos++;
        }
    }//GEN-LAST:event_term14ActionPerformed

    private void term15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_term15ActionPerformed
        this.repaint();

        if (term15.isSelected()) {
            term15.setText("1");
            msop[3][3]=10;
            mpos[3][3]=20;
            numsop++;numpos--;
        }
        else {
            term15.setText("0");
            msop[3][3]=20;
            mpos[3][3]=10;
            numsop--;numpos++;
        }
    }//GEN-LAST:event_term15ActionPerformed
   
    private void variableImputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_variableImputActionPerformed

        
        switch (variableImput.getSelectedIndex()) {
            case 0:
            case 1:
            case 2:
                super.repaint(); break;
        }
        switch (variableImput.getSelectedIndex()) {
            case 0:numsop=0; numpos = 4;correction=-2;ButtonReset();ValueReset();break;
            case 1:numsop=0;numpos = 8;correction=0;ButtonReset();ValueReset();break;
            case 2:numsop=0;numpos = 16;correction=0;ButtonReset();ValueReset();break;
        }        

    }//GEN-LAST:event_variableImputActionPerformed

    private void generateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateActionPerformed
    
        minResult.setText("");
        takeTerm= new Vector <String>();
        implTab=new ArrayList[5][5];
        resTermVect= new Vector <String>();
        ResTerm = "";
        ResTermHDL = "";
        String reg="";
    
            for(int i=0;i<row;i++){
                for(int j=0;j<column;j++){
                    switch(functionShape.getSelectedIndex()){
                    case 0://for sop
                        num=numsop;
                        if(msop[i][j]!=20){
                            reg=Integer.toBinaryString(msop[i][j]);
                            if(reg.length()!=impVar){			//while lenght of reg==num of input variables adds zeros
                                while(reg.length()!=impVar){
                                reg="0"+reg;
                                }
                            }
                            takeTerm.add(reg);
                        
                        }break;
                    case 1://for pos
                        num=numpos;
                        if(mpos[i][j]!=20){
                            reg=Integer.toBinaryString(mpos[i][j]);
                            if(reg.length()!=impVar){
                                while(reg.length()!=impVar){
                                reg="0"+reg;
                                }
                            }
                            takeTerm.add(reg);
                        
                        }break;
                    }
                }
            }
            if(takeTerm.size()==column*row){//term number == nuber of terms
                ResTerm="1";
                ResTermHDL="'1'";
                minResult.setText("F = "+ResTerm);
                minResultHDL.setText("F = "+ResTermHDL);
            }else if(takeTerm.size()==0){
                ResTerm="0";
                ResTermHDL="'0'";
                minResult.setText("F = "+ResTerm);
                minResultHDL.setText("F = "+ResTermHDL);
            }else{
                firstImplicants();
                minResult();
                minResult.setText("F = "+ResTerm);
                minResultHDL.setText("F = "+ResTermHDL);
            }
    }//GEN-LAST:event_generateActionPerformed
        
    public void ButtonReset (){                     /// set zeros for all buttons and all buttons are not pressed
        term0.setSelected(false);term1.setSelected(false);
        term2.setSelected(false);term3.setSelected(false);
        term4.setSelected(false);term5.setSelected(false);
        term6.setSelected(false);term7.setSelected(false);
        term8.setSelected(false);term9.setSelected(false);
        term10.setSelected(false);term11.setSelected(false);
        term12.setSelected(false);term13.setSelected(false);
        term14.setSelected(false);term15.setSelected(false);
        term0.setText("0");term1.setText("0");term2.setText("0");
        term3.setText("0");term4.setText("0");term5.setText("0");
        term6.setText("0");term7.setText("0");term8.setText("0");
        term9.setText("0");term10.setText("0");term11.setText("0");
        term12.setText("0");term13.setText("0");term14.setText("0");
        term15.setText("0");
 }

    public void ValueReset(){// reset all values depending at jComboBox1 selection
        int greyCode2[]={0,1,3,2,4+correction,5+correction,7,6,12,13,15,14,8,9,11,10};
        int x=0;
        for (int i=0;i<4;i++ ){
            for (int j=0;j<4;j++ ){
                msop[i][j]=20;
                mpos[i][j]=greyCode2[x];
                x++;
            }
        }
        num=0;
        takeTerm= new Vector <String>(); 
        implTab=new ArrayList[5][5]; 
        resTermVect= new Vector <String>();
        ResTerm="";
        ResTermHDL="";
        minResult.setText(ResTerm);
        minResultHDL.setText(ResTermHDL);
    }
    public void imp2 (Graphics pen,int x, int y){//painting graphics for 2imputs
        String functionStr = "";  
        
        pen.setColor(Color.BLACK);
        pen.fillRect(128+x,70+y,31,3);  //Q0 horizontal line
        pen.fillRect(65+x,123+y,3,31);  //Q1 vertical line
        
        Graphics2D g2d = (Graphics2D)pen;
        g2d.setFont(new Font(Font.DIALOG, Font.PLAIN, 15));
        
        functionStr = "q0";
        g2d.drawString(functionStr, 135+x, 68+y); //   x,y
        functionStr = "q1";
        g2d.drawString(functionStr, 45+x, 145+y); //   x,y
    }
    public void imp3 (Graphics pen,int x, int y){//painting graphics for 3imputs
        String functionStr = "";  
        
        pen.setColor(Color.BLACK);
        pen.fillRect(127+x,67+y,81,3);  //Q0 horizontal line
        pen.fillRect(172+x,165+y,81,3);  //Q1 horizontal line
        pen.fillRect(65+x,123+y,3,31);  //Q2 vertical line
        
        Graphics2D g2d = (Graphics2D)pen;
        g2d.setFont(new Font(Font.DIALOG, Font.PLAIN, 15));
        
        functionStr = "q0";
        g2d.drawString(functionStr, 155+x, 65+y); //   x,y
        functionStr = "q1";
        g2d.drawString(functionStr, 200+x, 181+y); //   x,y
        functionStr = "q2";
        g2d.drawString(functionStr, 45+x, 145+y); //   x,y
    }
    public void imp4 (Graphics pen,int x, int y){//painting graphics for 4imputs
        String functionStr = "";  
        
        pen.setColor(Color.BLACK);
        pen.fillRect(127+x,67+y,81,3);  //Q0 horizontal line
        pen.fillRect(172+x,248+y,81,3);  //Q1 horizontal line
        pen.fillRect(65+x,123+y,3,73);  //Q2 vertical line
        pen.fillRect(265+x,163+y,3,73);  //Q3 vertical line
        
        Graphics2D g2d = (Graphics2D)pen;
        g2d.setFont(new Font(Font.DIALOG, Font.PLAIN, 15));
        
        functionStr = "q0";
        g2d.drawString(functionStr, 155+x, 65+y); //
        functionStr = "q1";
        g2d.drawString(functionStr, 200+x, 265+y);//  
        functionStr = "q2";
        g2d.drawString(functionStr, 45+x, 160+y); //   
        functionStr = "q3";
        g2d.drawString(functionStr, 268+x, 205+y); //   
    }
    public  void firstImplicants(){//create table of first impicant sorted by count of ones                
	implTab=termTable(takeTerm);
	makepair();
    }

      
    public  void makepair(){// make pairs different in one 1 in implTab and sorted
	int resTermCnt=0;
	String TermNum="";
	int identical=0;
	Vector<String> tempRes= new Vector<String>();
	for(int x=0;x<=impVar-1;x++){                     				
            tempRes=new Vector<String>();//vector of simplify terms for example 00-1,11-0,..
            for(int i=0;i<=impVar;i++){//because implTab dimension it depending at number of intput variables
		for(int j=0;!implTab[i][j].isEmpty();j++){
			if(i+1!=impVar+1)
			for(int k=0;!implTab[i+1][k].isEmpty();k++){
				TermNum=getPair(implTab[i][j].get(0).number,implTab[i+1][k].get(0).number);//compare term with term which heve one log 1 more
				if(TermNum!=null){  				
					implTab[i+1][k].get(0).pair=true;  //set the flag, the pair was found	
					if(!tempRes.contains(TermNum)){	//if tempRes not contain TermNum(0-11)
						tempRes.add(TermNum);
						identical=1;
						resTermCnt++;    
					}
					identical=1;
				}
			}
			if(identical==0){				
				if(implTab[i][j].get(0).pair!=true){   //if pair flag in ImplTab is true add number to tempRes
					tempRes.add(implTab[i][j].get(0).number);
				}
                        }
			identical=0;
		}
	}
	implTab=termTable(tempRes);//create new term table with tempres vector
	if(tempRes.size()!=0)
		resTermVect=tempRes;                                 
        }
    }
    
    public  int maxImplicant(int[][] minTab){
	int max=0;
        int maxImpl=-1;
        
	for(int imp=0;imp<minTab.length;imp++){
		int cnt=0;
		for(int i=0;i<minTab[0].length;i++){
			if(minTab[imp][i]==1)//find ones in minTab
				cnt++;//count ones
		}
		if(cnt>max){//
			max=cnt;
			maxImpl=imp;
		}
	}
	
	if(maxImpl!=-1){//find prime imlicant
		implicant(minTab,maxImpl);
		return maxImpl;
	}
	return -1;
    }	
    public  void Result(Vector <String> ResTerms){//function for print result
	String reg="";
        char[] tempArray;
        char var[]= {'3','2','1','0'};  
        int positon=0;
        int i=0;
        int j=0;
        int plusCnt=-1;
        boolean endBracket=false;
    switch(functionShape.getSelectedIndex()){
            case 0:{
                for(i=0;i<ResTerms.size();i++){					
                	reg=ResTerms.get(i);					
                	tempArray=reg.toCharArray();
                        for(int x=0;x<impVar;x++){
                            if(tempArray[x]=='1'||tempArray[x]=='0'){
                                plusCnt++;
                            }
                        }
                        if(plusCnt>0&&(ResTerms.size()-1)>0){//no breckets for one q
                            ResTermHDL=ResTermHDL+"(";
                            endBracket=true;//set brecket flag for pos 
                        }else{endBracket=false;}
                        
                	for(j=0;j<impVar;j++){
                		if(tempArray[j]=='-'){				
                			positon++;
                		}
                		else if (tempArray[j]=='0'){
                                        ResTerm=ResTerm+"/q"+var[4-impVar+positon];
                                        if(plusCnt>0){ResTermHDL=ResTermHDL+" NOT q"+var[4-impVar+positon]+" AND ";}
                                        else{ResTermHDL=ResTermHDL+" NOT q"+var[4-impVar+positon];}
                                        positon++;plusCnt--;
                		}
                		else if (tempArray[j]=='1'){
                                        ResTerm=ResTerm+"q"+var[4-impVar+positon];
                			if(plusCnt>0){ResTermHDL=ResTermHDL+"q"+var[4-impVar+positon]+" AND ";}
                                        else{ResTermHDL=ResTermHDL+"q"+var[4-impVar+positon];}
                			positon++;plusCnt--;
                		}
                		else{};
                	}
                        if(endBracket){
                        endBracket=false;
                        ResTermHDL=ResTermHDL+")";
                        }
                        plusCnt=-1;
                	if(i<ResTerms.size()-1){
                		ResTermHDL+=" OR ";
                                ResTerm+=" + ";
                        }
                        reg="";
                        positon=0;
                } 
            }break;
            case 1: 
                for(i=0;i<ResTerms.size();i++){					
                	reg=ResTerms.get(i);					
                	tempArray=reg.toCharArray();
                        for(int x=0;x<impVar;x++){
                            if(tempArray[x]=='1'||tempArray[x]=='0'){
                                plusCnt++;
                            }
                        }
                        if(plusCnt>0&&(ResTerms.size()-1)>0){//no breckets for one q
                            ResTermHDL=ResTermHDL+"(";
                            ResTerm=ResTerm+"(";
                            endBracket=true;//set brecket flag for pos 
                        }else{endBracket=false;}
                        
                	for(j=0;j<impVar;j++){
                		if(tempArray[j]=='-'){				
                			positon++;
                		}
                		else if (tempArray[j]=='1'){
                                        if(plusCnt>0){ResTermHDL=ResTermHDL+" NOT q"+var[4-impVar+positon]+" OR ";ResTerm=ResTerm+"/q"+var[4-impVar+positon]+"+";}
                                        else{ResTermHDL=ResTermHDL+" NOT q"+var[4-impVar+positon];ResTerm=ResTerm+"/q"+var[4-impVar+positon];}
                                        positon++;plusCnt--;
                		}
                		else if (tempArray[j]=='0'){
                			if(plusCnt>0){ResTermHDL=ResTermHDL+"q"+var[4-impVar+positon]+" OR ";ResTerm=ResTerm+"q"+var[4-impVar+positon]+"+";}
                                        else{ResTermHDL=ResTermHDL+"q"+var[4-impVar+positon];ResTerm=ResTerm+"q"+var[4-impVar+positon];}
                			positon++;plusCnt--;
                		}
                		else{};
                	}
                        if(endBracket){
                        endBracket=false;
                        ResTermHDL=ResTermHDL+")";
                        ResTerm=ResTerm+")";
                        }
                        plusCnt=-1;
                	if(i<ResTerms.size()-1){
                		ResTermHDL+=" AND ";
                                ResTerm+=" * ";	
                        }
                        reg="";
                        positon=0;
                }  
            break;      
                
        }  
    }
   
    
    
    
    public  void minResult(){//resulting terms are syplify
		int primImpl=resTermVect.size();//seize of resoluton term vector
		int[][] minTable= new int[primImpl][num];//create table whitch have dimension: rows size of vector and column size of count presset button
		for(int i=0;i<primImpl;i++){
			for(int j=0;j<num;j++){
					minTable[i][j]=compare(resTermVect.get(i),takeTerm.get(j));//compare symplify terms(--0-) with original terms
			}
		}
		Vector <String> lastTerms= new Vector<String>();
		int uk=0;
		int position=0;
		while(uk==0){
			position=essencImplicant(minTable);
			if(position!=-1)
				lastTerms.add(resTermVect.get(position)); 
			else{	
				position=maxImplicant(minTable);
				if(position!=-1)
					lastTerms.add(resTermVect.get(position));
				else
					uk=1;
			}
		}
		Result(lastTerms);
    }
    
    public  int compare(String term1, String term2){//if return 1 set flag to symplify
	char[] term1Array=term1.toCharArray();
	char[] term2Array=term2.toCharArray();
	for(int i=0;i<impVar;i++){
		if(term1Array[i]!=term2Array[i] && term1Array[i]!='-')
			return 0;
	}
	return 1;
    }
    
    public  int essencImplicant(int[][] minTab){
	for(int i=0;i<minTab[0].length;i++){
		int lastFind=-1;
		for(int impl=0;impl<minTab.length;impl++){
			if(minTab[impl][i]==1){//if resulting term implies original term, go to next term
				if(lastFind==-1){
					lastFind=impl;
				}else{//it isn't essencial imlicant 
					lastFind=-1;
					break;
				}
			}
		}
		if(lastFind!=-1){//return row of last find implicanr 
			implicant(minTab,lastFind);
			return lastFind;
		}
	}
	return -1;
    }

    public  void implicant(int [][] minTab,int impl1){//set zero  where is essential impl and and column impied this implicant 
	for(int i=0;i<minTab[0].length;i++){
            if(minTab[impl1][i]==1)
                for(int impl2=0;impl2<minTab.length;impl2++){
                    minTab[impl2][i]=0;
                }
           }
    }
    
    public  String getPair(String term1,String term2){//compare two terms and if two terms are different only in one bit this bit replace for '-'
	char []pole1 = new char[term1.length()];
        char []pole2;
        int difference=-1;
	for(int i=0;i<impVar;i++){
		pole1=term1.toCharArray();
		pole2=term2.toCharArray();
		if(pole1[i]!=pole2[i]){
			if(difference==-1)
                            difference=i;
			else
                            return null;
		}
	}
	if(difference==-1)//difference not found
	return null;
	char[] result= term1.toCharArray();
	result[difference]='-';
	String resultTerm= new String(result);
	return resultTerm;
    }
    public  int log1count(String term){//count of log 1 in each term

			int cnt=0;
			char[] termArray=term.toCharArray();
			for(int i=0;i<term.length();i++){
				if(termArray[i]=='1'){//if found 1 cnt++
                                    cnt++;
				}
			}
			return cnt;
		}

    public  ArrayList<Term>[][] termTable(Vector <String> tempRes){   // creater table of terms depending input vector
	Term reg;
	int cnt1=0;
	int element=0;
	ArrayList[][] tempArray = new ArrayList[impVar+1][maxTrm+1];// +1 because 0 ones or 1,2,3,4 ones

	ArrayList<Term> [][]tempTab = tempArray;
	for(int i=0;i<=impVar;i++){
		for(int j=0;j<=maxTrm;j++){
			tempTab[i][j]= new ArrayList<Term>();// create array list in each term tempTab[][]
                }
        }

	for(int k=0;k<tempRes.size();k++){
		cnt1=log1count(tempRes.get(k));
		reg=initTerm(tempRes.get(k),false);
		
		while(!tempTab[cnt1][element].isEmpty()){
			element++;
		}
		tempTab[cnt1][element].add(reg);
		element=0;
        	}
	return tempTab;
    }
		
    public  Term initTerm(String c,boolean p){ //initializing term type
    Term term=new Term();
    term.pair=p;
    term.number=c;
    return term;
    }
    
    @Override
    public void paint(Graphics g){// repaint main window depending jComboBox1 have selected
        switch (variableImput.getSelectedIndex()) {
            case 0:
                impVar=2; correction=-2;row = 2; column = 2;
                term2.setVisible(false);
                term2.revalidate();
                term3.setVisible(false);
                term3.revalidate();
                term6.setVisible(false);
                term6.revalidate();
                term7.setVisible(false);
                term7.revalidate();
                
                term8.setVisible(false);
                term8.revalidate();
                term9.setVisible(false);
                term9.revalidate();
                term10.setVisible(false);
                term10.revalidate();
                term11.setVisible(false);
                term11.revalidate();
                
                term12.setVisible(false);
                term12.revalidate();
                term13.setVisible(false);
                term13.revalidate();
                term14.setVisible(false);
                term14.revalidate();
                term15.setVisible(false);
                term15.revalidate();
                super.paint(g);
                imp2(g,0,0);
                break;
            case 1:
                impVar=3; correction=0; row = 2; column = 4;
                term2.setVisible(true);
                term2.revalidate();
                term3.setVisible(true);
                term3.revalidate();
                term6.setVisible(true);
                term6.revalidate();
                term7.setVisible(true);
                term7.revalidate();
                
                term8.setVisible(false);
                term8.revalidate();
                term9.setVisible(false);
                term9.revalidate();
                term10.setVisible(false);
                term10.revalidate();
                term11.setVisible(false);
                term11.revalidate();
                
                term12.setVisible(false);
                term12.revalidate();
                term13.setVisible(false);
                term13.revalidate();
                term14.setVisible(false);
                term14.revalidate();
                term15.setVisible(false);
                term15.revalidate();
                super.paint(g);
                imp3(g,0,0);
                break;
            case 2:
                impVar=4; correction=0; row = 4; column = 4;
                term2.setVisible(true);
                term2.revalidate();
                term3.setVisible(true);
                term3.revalidate();
                term6.setVisible(true);
                term6.revalidate();
                term7.setVisible(true);
                term7.revalidate();
                
                term8.setVisible(true);
                term8.revalidate();
                term9.setVisible(true);
                term9.revalidate();
                term10.setVisible(true);
                term10.revalidate();
                term11.setVisible(true);
                term11.revalidate();
                
                term12.setVisible(true);
                term12.revalidate();
                term13.setVisible(true);
                term13.revalidate();
                term14.setVisible(true);
                term14.revalidate();
                term15.setVisible(true);
                term15.revalidate();
                super.paint(g);
                imp4(g,0,0);
                break;
            }  
  } 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox functionShape;
    private javax.swing.JButton generate;
    private javax.swing.JTextField minResult;
    private javax.swing.JTextField minResultHDL;
    private javax.swing.JToggleButton term0;
    private javax.swing.JToggleButton term1;
    private javax.swing.JToggleButton term10;
    private javax.swing.JToggleButton term11;
    private javax.swing.JToggleButton term12;
    private javax.swing.JToggleButton term13;
    private javax.swing.JToggleButton term14;
    private javax.swing.JToggleButton term15;
    private javax.swing.JToggleButton term2;
    private javax.swing.JToggleButton term3;
    private javax.swing.JToggleButton term4;
    private javax.swing.JToggleButton term5;
    private javax.swing.JToggleButton term6;
    private javax.swing.JToggleButton term7;
    private javax.swing.JToggleButton term8;
    private javax.swing.JToggleButton term9;
    private javax.swing.JComboBox variableImput;
    // End of variables declaration//GEN-END:variables
}
